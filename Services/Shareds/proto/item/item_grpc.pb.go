// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: item.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SvcItemClient is the client API for SvcItem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SvcItemClient interface {
	RPCItem(ctx context.Context, in *PbItem, opts ...grpc.CallOption) (*PbResp, error)
	RPCItems(ctx context.Context, in *PbReq, opts ...grpc.CallOption) (*PbItems, error)
}

type svcItemClient struct {
	cc grpc.ClientConnInterface
}

func NewSvcItemClient(cc grpc.ClientConnInterface) SvcItemClient {
	return &svcItemClient{cc}
}

func (c *svcItemClient) RPCItem(ctx context.Context, in *PbItem, opts ...grpc.CallOption) (*PbResp, error) {
	out := new(PbResp)
	err := c.cc.Invoke(ctx, "/PbItem.SvcItem/RPCItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcItemClient) RPCItems(ctx context.Context, in *PbReq, opts ...grpc.CallOption) (*PbItems, error) {
	out := new(PbItems)
	err := c.cc.Invoke(ctx, "/PbItem.SvcItem/RPCItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcItemServer is the server API for SvcItem service.
// All implementations must embed UnimplementedSvcItemServer
// for forward compatibility
type SvcItemServer interface {
	RPCItem(context.Context, *PbItem) (*PbResp, error)
	RPCItems(context.Context, *PbReq) (*PbItems, error)
	mustEmbedUnimplementedSvcItemServer()
}

// UnimplementedSvcItemServer must be embedded to have forward compatible implementations.
type UnimplementedSvcItemServer struct {
}

func (UnimplementedSvcItemServer) RPCItem(context.Context, *PbItem) (*PbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCItem not implemented")
}
func (UnimplementedSvcItemServer) RPCItems(context.Context, *PbReq) (*PbItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCItems not implemented")
}
func (UnimplementedSvcItemServer) mustEmbedUnimplementedSvcItemServer() {}

// UnsafeSvcItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SvcItemServer will
// result in compilation errors.
type UnsafeSvcItemServer interface {
	mustEmbedUnimplementedSvcItemServer()
}

func RegisterSvcItemServer(s grpc.ServiceRegistrar, srv SvcItemServer) {
	s.RegisterService(&SvcItem_ServiceDesc, srv)
}

func _SvcItem_RPCItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcItemServer).RPCItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PbItem.SvcItem/RPCItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcItemServer).RPCItem(ctx, req.(*PbItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcItem_RPCItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcItemServer).RPCItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PbItem.SvcItem/RPCItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcItemServer).RPCItems(ctx, req.(*PbReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SvcItem_ServiceDesc is the grpc.ServiceDesc for SvcItem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SvcItem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PbItem.SvcItem",
	HandlerType: (*SvcItemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPCItem",
			Handler:    _SvcItem_RPCItem_Handler,
		},
		{
			MethodName: "RPCItems",
			Handler:    _SvcItem_RPCItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}
